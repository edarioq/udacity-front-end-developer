==================
Keyboard Shorcuts
==================
Select Word: ⌘ + D
Select Line: ⌘ + L
Select All: ⌘ + A
Duplicate code ⌘ + ⇧ + D with or without text highlighted
Jump to Opening/Closing Parentheses, Brackets, Braces: Ctrl + M
Jump to Definition: ⌘ + R
Reopen Tab: ⌘ + ⇧ + T
Quick Open ⌘ + P

==================
JavaScript
==================

 - Scopes: Region in code where variables can be accessed by name without access errors
     ** Variables in the Global scope can be accessed anywhere, this is the lexical scope
     ** Variables from within functions can be accessed from within that function,
        these are execution contexts (or in memory scopes)
         *** They are built as the code runs, not as it's typed
         *** OR They are only used when executed (or called), not as it's typed
         *** Execution contexts and objects (key value pairs) are two different things.
         Can't store an array full of execution contexts or iterate over the contexts, for example.
         *** There can be many execution contexts, and each can store different values (but only one global scope)
 - Closures: Functions that have access to all the variables from all the scopes that surround it,
   or any function that remains available after the outer scopes have returned
     ** In other words, a way to allowing functions and variables to be called from outside their scope
     ** One method of having a closure is to create a global variable (array) and store stuff in it,
        another is to pass it to setTimeout, another is to return it in the function method
 - The 'this' keyword: An identifier that has an object bound to it
     ** Usually what is left to a dot
     ** If no dot, then the global scope gets bound to this
     ** Possible to force this to equal to the object you want, using .call for example
 - Prototype delegation (prototype chains): Mechanism of making objects have properties of other objects
     ** It does so by delegating the failed look ups of the current object to the original object
     ** Can be achieved in JS by using Object.create(object);
 - OOP

Class: A function that can create many similar objects of itself

==================
Website Performance
==================
- CRP: Sequence of steps the browser goes through to convert HTML, CSS, and JS to actual pixels on screen
    ** Steps:
        Build the DOM
        Build the CSSOM - CSS is render blocking
        Combine those two to build the render tree
        Calculate the layout (or what stuff goes where, what sizes, etc.)
        Finally pixels are painted
-- Frame per Second
   ** The pipeline for 1 frame, these can be run in one of three ways for one frame (1, 2, 3, 4, 5
      or 1, 2, 3, 5, or 1, 2, 5. In any case, Animation, Style and Compositing must occur:
        1. Animation: Doing or implementing a visual change with either Javascript, CSS, or the Web Animation API
        2. Style: Browser must recalculate the styles of the elements that were affected
        3. Layout: Is a change in geometry (width, height, or position in relation to another element)
        4. Paint: Is a change in background image, text color, or shadow, a change in layout (above) also triggers this
        5. Composite: When elements must be put back together, using the right layers in the correct order

- RAIL: Load (up to 1s), idle (up to 50ms), animations (16ms or less), response (up to 100ms)
    ** Load: Critical resources must come here and load within 1 second
    ** Idle: Perfect for doing non essential work using 50ms chunks so that it stops when user starts interacting
    ** Animation: This is when 60 FPS is critical
    ** Response: Needs to respond to user input within 100ms

- Styles and layout:
    ** Changes in layout result in a linear performance hit, meaning if I have 100 elements and I make 1000 additions, the performance hit is 100 times greater
    ** BEM stands for Block, Element, Modifier
        - Block: header, container, menu, checkbox, input
        - Element: menu item, list item, checkbox caption, header title
        - Modifier: disabled, highlighted, checked, fixed, size big, color yellow


1. RUN 